{"version":3,"sources":["Components/MessageForm.jsx","Components/MyMessage.jsx","Components/TheirMessage.jsx","Components/ChatFeed.js","Components/LoginForm.jsx","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","bind","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","username","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","LoginForm","setUsername","password","setPassword","error","setError","e","a","authObject","axios","get","headers","localStorage","setItem","window","location","reload","required","align","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5f980af.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react';\r\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\r\nimport { sendMessage, isTyping } from 'react-chat-engine';\r\n\r\nconst MessageForm = (props) => {\r\n    const [value, setValue] = useState('');\r\n    const { chatId, creds } = props;\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n\r\n        isTyping(props, chatId);\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const text = value.trim();\r\n\r\n        if (text.length > 0) {\r\n            sendMessage(creds, chatId, { text });\r\n        }\r\n\r\n        setValue('');\r\n    };\r\n\r\n    const handleUpload = (event) => {\r\n        sendMessage(creds, chatId, { files: event.target.files, text: '' });\r\n    };\r\n\r\n    return (\r\n        <form className=\"message-form\" onSubmit={handleSubmit}>\r\n            <input\r\n                className=\"message-input\"\r\n                placeholder=\"Send a message...\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                onSubmit={handleSubmit}\r\n            />\r\n            <label htmlFor=\"upload-button\">\r\n                <span className=\"image-button\">\r\n                    <PictureOutlined className=\"picture-icon\" />\r\n                </span>\r\n            </label>\r\n            <input\r\n                type=\"file\"\r\n                multiple={false}\r\n                id=\"upload-button\"\r\n                style={{ display: 'none' }}\r\n                onChange={handleUpload.bind(this)}\r\n            />\r\n            <button type=\"submit\" className=\"send-button\">\r\n                <SendOutlined className=\"send-icon\" />\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default MessageForm;\r\n","import React from 'react'\r\n\r\nconst MyMessage = ({ message }) => {\r\n    if (message.attachments && message.attachments.length > 0) {\r\n        return (\r\n            <img\r\n                src={message.attachments[0].file}\r\n                alt=\"message-attachment\"\r\n                className=\"message-image\"\r\n                style={{ float: 'right' }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"message\" style={{ float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#3B2A50' }}>\r\n            {message.text}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyMessage;","import React from 'react'\r\n\r\nconst TheirMessage = ({ lastMessage, message }) => {\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n\r\n    return (\r\n        <div className=\"message-row\">\r\n            {isFirstMessageByUser && (\r\n                <div className=\"message-avatar\"\r\n                    style={{ backgroundImage: `url(${message?.sender?.avatar})` }}\r\n                />\r\n            )}\r\n            {\r\n                message?.attachments?.length > 0\r\n                    ? (\r\n                        <img src={message.attachments[0].file} alt=\"message-attachments\" className=\"message-image\" style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }} />\r\n                    ) : (\r\n                        <div className=\"message\" style={{ float: 'left', marginRight: '18px', color: 'white', backgroundColor: '#CABCDC' }}>\r\n                            {message.text}\r\n                        </div>\r\n                    )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TheirMessage\r\n","import React from 'react'\r\nimport MessageForm from './MessageForm';\r\nimport MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\n\r\nconst ChatFeed = (props) => {\r\n    const { chats, activeChat, userName, messages } = props;\r\n    const chat = chats && chats[activeChat];\r\n\r\n    const renderReadReceipts = (message, isMyMessage) => {  //by this we can image icon of person\r\n        return chat.people.map((person, index) => person.last_read === message.id && (\r\n            <div\r\n                key={`read_${index}`}\r\n                className=\"read-receipt\"\r\n                style={{\r\n                    float: isMyMessage ? 'right' : 'left',\r\n                    backgroundImage: `url(${person?.person?.avatar})`\r\n                }}\r\n            />\r\n        ));\r\n    }\r\n\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages);\r\n\r\n        return keys.map((key, index) => {\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0 ? null : keys[index - 1];\r\n            const isMyMessage = userName === message.sender.username;\r\n            return (\r\n                <div key={`msg_${index}`} style={{ width: '100%' }}>\r\n                    <div className=\"message-block\">\r\n                        {\r\n                            isMyMessage\r\n                                ? <MyMessage message={message} />\r\n                                : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />\r\n                        }\r\n                    </div>\r\n                    <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\r\n                        {renderReadReceipts(message, isMyMessage)}\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        });\r\n    };\r\n\r\n    if (!chat) return <div />;\r\n\r\n    return (\r\n        <div className=\"chat-feed\">\r\n            <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\">\r\n                    {chat?.title}\r\n                </div>\r\n                <div className=\"chat-subtitle\">\r\n                    {chat.people.map((person) => `${person.person.username}`)}\r\n                </div>\r\n            </div>\r\n\r\n            {renderMessages()}\r\n            <div style={{ height: '100px' }} />\r\n            <div className=\"message-form-container\">\r\n                <MessageForm {...props} chatId={activeChat} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatFeed;\r\n","import React from 'react'\r\nimport { useState } from 'react'\r\nimport axios from 'axios'\r\nconst LoginForm = () => {\r\n const [username, setUsername] = useState('')\r\n const [password, setPassword] = useState('')\r\n const [error, setError] = useState('')\r\n const handleSubmit=async(e)=>{\r\n    e.preventDefault();\r\n\r\n    const authObject={'Project-ID':\"81a00cd6-4a11-4861-b319-07f520526296\", 'User-Name':username,'User-Secret':password};\r\n\r\n    try {\r\n        // username / password => chatengine -> give messages\r\n       await axios.get('https://api.chatengine.io/chats',{headers:authObject});  \r\n       // works out -> logged in\r\n       localStorage.setItem('username',username);\r\n       localStorage.setItem('password',password);\r\n\r\n       window.location.reload();\r\n    } catch (error) {\r\n         // error -> try with new username...\r\n         setError('Oops, incorrect Credentail')\r\n    }\r\n    \r\n }\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"form\">\r\n                <h1 className=\"title\">Chat Application</h1>\r\n                <form onSubmit={handleSubmit} >\r\n                    <input type=\"text\" value={username} onChange={(e)=>setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" required />\r\n                    <input type=\"password\" value={password} onChange={(e)=>setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required />\r\n                    <div align=\"center\">\r\n                        <button className=\"button\" type=\"submit\">\r\n                            <span>Start Chatting</span>\r\n                        </button>\r\n                    </div>\r\n                    <h2 className=\"error\">{error}</h2>\r\n                </form>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm;\r\n","import './App.css';\nimport { ChatEngine } from 'react-chat-engine';\nimport ChatFeed from './Components/ChatFeed';\nimport LoginForm from './Components/LoginForm';\nconst App = () => {\n\n  if(!localStorage.getItem('username')) return <LoginForm/>\n  return (\n    <>\n      <ChatEngine\n        height=\"100vh\"\n        projectID=\"81a00cd6-4a11-4861-b319-07f520526296\"\n        userName={localStorage.getItem('username')}\n        userSecret={localStorage.getItem('password')}\n        renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps} />}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}